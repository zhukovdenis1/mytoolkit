import json
import time
import random
import os
import requests
from urllib.parse import unquote
from playwright.sync_api import sync_playwright
import urllib3

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    get_url = 'https://deshevyi.loc/api/shop/get-product-for-reviews-parse'
    set_url = 'https://deshevyi.loc/api/shop/set-parsed-reviews'
    max_page = 35
    scroll_delay_min = 1  # —Å–µ–∫
    scroll_delay_max = 3  # —Å–µ–∫
    delay_min = 10  # —Å–µ–∫
    delay_max = 60  # —Å–µ–∫
    cookies_file = "aliexpress_cookies.json"
    user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    verify_ssl = False

config = Config()

def save_cookies(context):
    cookies = context.cookies()
    with open(config.cookies_file, 'w') as f:
        json.dump(cookies, f)
    print("‚úì –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

def load_cookies(context):
    if os.path.exists(config.cookies_file):
        with open(config.cookies_file, 'r') as f:
            cookies = json.load(f)
            context.add_cookies(cookies)
        print("‚úì –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
    return False

def is_captcha_url(url):
    return "/_____tmd_____/punish" in url

def wait_for_reviews_page(page, timeout=120000):
    print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤...")
    start_time = time.time()

    while True:
        current_url = page.url
        if time.time() - start_time > timeout:
            raise TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

        if "/reviews" in current_url and not is_captcha_url(current_url):
            try:
                page.wait_for_selector("div.reviews-content", timeout=10000)
                print("‚úì –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return True
            except:
                print("√ó –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ...")

        time.sleep(2)

def get_product_for_parse():
    print(f"\nüîÑ –î–µ–ª–∞–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ {config.get_url}")
    try:
        response = requests.get(config.get_url, verify=config.verify_ssl)
        print(f"‚úì –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.text}")

        data = response.json()
        if not data.get('data'):
            print("√ó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return None

        product_data = data['data']
        return {
            'product_id': product_data['product_id'],
            'url': product_data['url'],
            'referer': product_data['referer'],
            'id_ae': product_data['url'].split('/item/')[1].split('/')[0]
        }
    except Exception as e:
        print(f"√ó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return None

def send_parsed_reviews(product_info, page_num, page_size, response_data):
    payload = {
        'page': page_num,
        'limit': page_size,
        'product_id': product_info['product_id'],
        'id_ae': product_info['id_ae'],
        'json': response_data
    }

    print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num} –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    try:
        response = requests.post(config.set_url, json=payload, verify=config.verify_ssl)
        print(f"‚úì –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Å—Ç–∞—Ç—É—Å {response.status_code}): {response.text}")
        return True
    except Exception as e:
        print(f"√ó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def parse_reviews_page(product_info):
    with sync_playwright() as p:
        browser = p.chromium.launch(
            headless=False,
            channel="chrome",
            args=[
                "--start-maximized",
                "--disable-blink-features=AutomationControlled",
                "--disable-infobars",
                "--lang=ru-RU"
            ]
        )

        context = browser.new_context(
            user_agent=config.user_agent,
            viewport={"width": 1920, "height": 1080},
            locale="ru-RU",
            timezone_id="Europe/Moscow"
        )

        load_cookies(context)
        page = context.new_page()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Referer –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        page.set_extra_http_headers({
            "Referer": product_info['referer']
        })

        try:
            print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤: {product_info['url']}")
            page.goto(product_info['url'], timeout=60000)

            if is_captcha_url(page.url):
                print("\n=== –ù–ï–û–ë–•–û–î–ò–ú–û –†–ï–®–ò–¢–¨ –ö–ê–ü–ß–£ ===")
                print("1. –†–µ—à–∏—Ç–µ –∫–∞–ø—á—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                print("2. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤")
                print("3. –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                print("===============================\n")

                wait_for_reviews_page(page)
                save_cookies(context)

            captured_pages = set()

            def handle_response(response):
                if "aer-jsonapi/review" in response.url and response.request.method == "POST":
                    try:
                        post_data = json.loads(response.request.post_data)
                        page_num = post_data.get("pagination", {}).get("pageNum", 0)
                        page_size = post_data.get("pagination", {}).get("pageSize", 10)
                        product_key = post_data.get("productKey", {}).get("id", "")

                        if 1 <= page_num <= config.max_page and page_num not in captured_pages:
                            response_data = response.json()
                            if send_parsed_reviews(product_info, page_num, page_size, response_data):
                                captured_pages.add(page_num)
                                print(f"‚úì –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                    except Exception as e:
                        print(f"√ó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

            page.on("response", handle_response)

            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É...")
            for attempt in range(1, 31):
                if len(captured_pages) >= config.max_page:
                    break

                if is_captcha_url(page.url):
                    print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ")
                    wait_for_reviews_page(page)
                    save_cookies(context)
                    continue

                scroll_amount = random.randint(800, 1200)
                page.evaluate(f"""
                    window.scrollBy({{
                        top: {scroll_amount},
                        behavior: 'smooth'
                    }});
                """)

                if random.random() > 0.5:
                    page.mouse.move(
                        random.randint(100, 500),
                        random.randint(100, 500)
                    )

                delay = random.uniform(config.scroll_delay_min, config.scroll_delay_max)
                time.sleep(delay)
                print(f"‚Üª –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ {attempt}, —Å–æ–±—Ä–∞–Ω–æ: {len(captured_pages)}/{config.max_page}")

            print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–±—Ä–∞–Ω–æ {len(captured_pages)} —Å—Ç—Ä–∞–Ω–∏—Ü –æ—Ç–∑—ã–≤–æ–≤")

        except Exception as e:
            print(f"√ó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            save_cookies(context)
            browser.close()

def main():
    while True:
        product_info = get_product_for_parse()
        if not product_info:
            delay = random.uniform(config.delay_min, config.delay_max)
            print(f"‚è≥ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞. –ñ–¥–µ–º {delay:.1f} —Å–µ–∫...")
            time.sleep(delay)
            continue

        parse_reviews_page(product_info)

        delay = random.uniform(config.delay_min, config.delay_max)
        print(f"‚è≥ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ñ–¥–µ–º {delay:.1f} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...")
        time.sleep(delay)

if __name__ == "__main__":
    main()
